{"version":3,"sources":["ledsPlugin.js"],"names":["actuator","interval","resources","require","actuators","leds","modelarray","pi","name","model","pluginName","check1","what","i","console","info","value","stopBlinking","writeSync","alreadyPlayed","blinkLED","Gpio","gpio","connectHardware","blinkLed","err","led1state","setTimeout","simulate","setInterval","localParams","frequency","exports","start","params","clearInterval","unexport"],"mappings":"aAAA,IACIA,SAAUC,SADVC,UAAYC,QAAQ,2BAApBD,MAAAA,UAAYC,GAAQC,UAAAC,KAAA,GAGxBC,WAAaJ,UAAUK,GAAGH,UAAUC,KAFpC,IAAIL,WAAUC,MAAdO,KACIC,YAAQP,CAAAA,UAAaE,EAAUC,UAAnC,KACAC,cAAaJ,EACTQ,UAAU,EAwBX,SAAAC,OAAAC,GAKD,IAAKC,EAAE,EAAGA,EAAE,EAAGA,IAJF,IAAbC,EAAQC,GAAKC,QANfC,cAAA,EAaMjB,SAASkB,UAAU,GAJzBC,eAAA,GAE0B,IAAlBP,EAAIC,GAAIG,QACVC,cAAe,EACfjB,SAASkB,UAAU,GACnBC,eAAe,GAOK,IAAlBP,EAAKC,GAAGG,OAAgC,IAAlBG,gBALzBF,cAAI,EACHA,WACAjB,eAASkB,GAITD,SAAAA,kBACAG,IAAAA,EAAAA,QAAQ,SAAAC,KACRF,SAAAA,IAAAA,EAAgBV,MAAhBa,KAAA,OACIR,QAAAC,KAAA,gCAAAL,YAUV,SAASU,YANAG,SAATC,EAASD,GACHF,eAEJP,SAAQC,KAAK,SAAAU,EAAAT,GACd,GADcU,UAAiChB,EAA9CM,EACDS,EAUO,MAAMA,EANVzB,SAAIiB,MAAc,EAAlBD,EAAkB,SAAAS,GAGjB,GAAAA,EASK,MAAMA,MANRE,WAAMF,EAAN,MAGFzB,GAGI,SAAA4B,WACD3B,SAAA4B,YAAA,WATLpB,MAAAO,MAaAW,MAAAA,OAAWH,EAYTf,MAAMO,OAAQ,GARnBc,YAAAC,WAWCjB,QAAQC,KAAK,iCAAkCL,YAvFjDS,eAAe,EAAGa,QAAlBC,MAAA,SAAAC,IACAJ,YAAgBI,GAEAN,SAOZA,YAHFE,kBAMED,YAAYlB,OAAQ,IAAIL,cAAxBuB,QAAAA,KAAW,WAEZC,YAAAF,SATHO,cAAAlC,UAYA+B,SAAAI,WAEID,QAAAA,KAAAA,qBAAAzB","file":"ledsPlugin.min.js","sourcesContent":["var resources = require('./../../resources/model');\nvar actuator, interval;\nvar model = resources.pi.actuators.leds['1'];\nmodelarray = resources.pi.actuators.leds;\nvar pluginName = model.name;\nvar localParams = {'simulate': false, 'frequency': 2000};\nlet stopBlinking = false;\nvar led1state = 1;\nalreadyPlayed = false;\n\n\nexports.start = function (params) {\n  localParams = params;\n  \n  if (localParams.simulate) {\n    simulate();\n  } else {\n    connectHardware();\n    setInterval(check1, 500,modelarray);\n    \n  }\n};\n\nexports.stop = function () {\n  if (localParams.simulate) {\n    clearInterval(interval);\n  } else {\n    actuator.unexport();\n  }\n  console.info('%s plugin stopped!', pluginName);\n};\n\nfunction check1(what) {\n  for (i=1; i<4; i++){\n    if (what[i].value === 0){\n      stopBlinking = true;\n      actuator.writeSync(1);\n      alreadyPlayed= false;\n    }\n     if (what[i].value=== 1){\n      stopBlinking = true;\n      actuator.writeSync(0);\n      alreadyPlayed = false;\n    }\n    if (what[i].value === 2 & alreadyPlayed === false){\n      stopBlinking = false;\n      blinkLED();\n      alreadyPlayed = true;\n         }\n        }\n}\n\nfunction connectHardware() {\n  var Gpio = require('onoff').Gpio;\n   actuator = new Gpio(model.gpio, 'out'); //#D changed gpio from model.gpio\n  console.info('Hardware %s actuator started!', pluginName);  \n}\n\nfunction blinkLED(){\n  const blinkLed = _ => {\n    if (stopBlinking) {\n      return;\n      //return actuator.unexport();\n    }\n    actuator.read((err, value) => {led1state = value ^1;// Asynchronous read\n      if (err) {\n        throw err;\n      }\n  \n      actuator.write(value ^ 1, err => {\n       // Asynchronous write\n        if (err) {\n          throw err;\n        }\n      });\n    });\n  \n    setTimeout(blinkLed, 2000);\n  };\n  \n  blinkLed();\n}\n  \nfunction simulate() {\n  interval = setInterval(function () {\n    // Switch value on a regular basis\n    if (model.value) {\n      model.value = false;\n    } else {\n      model.value = true;\n    }\n  }, localParams.frequency);\n  console.info('Simulated %s actuator started!', pluginName);\n};\n\n//#A Observe the model for the LEDs\n//#B Listen for model changes, on changes call switchOnOff\n//#C Change the LED state by changing the GPIO state\n//#D Connect the GPIO in write (output) mode\n\n"]}