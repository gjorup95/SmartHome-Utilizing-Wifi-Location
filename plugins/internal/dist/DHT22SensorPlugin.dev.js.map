{"version":3,"sources":["DHT22SensorPlugin.js"],"names":["resources","require","utils","interval","sensor","model","pi","sensors","pluginName","localParams","exports","start","params","simulate","connectHardware","stop","clearInterval","unexport","console","info","sensorDriver","initialize","temperature","gpio","read","readout","value","parseFloat","toFixed","humidity","showValue","setTimeout","frequency","warn","setInterval","randomInt"],"mappings":"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","sourcesContent":["var resources = require('./../../resources/model'),\n  utils = require('./../../utils/utils.js');\n\nvar interval, sensor;\nvar model = resources.pi.sensors;\nvar pluginName = 'Temperature & Humidity';\nvar localParams = {'simulate': false, 'frequency': 5000};\n\nexports.start = function (params) {\n  localParams = params;\n  if (params.simulate) {\n    simulate();\n  } else {\n    connectHardware();\n  }\n};\n\nexports.stop = function () {\n  if (params.simulate) {\n    clearInterval(interval);\n  } else {\n    sensor.unexport();\n  }\n  console.info('%s plugin stopped!', pluginName);\n};\n\nfunction connectHardware() {\n var sensorDriver = require('node-dht-sensor');\n  var sensor = {\n    initialize: function () {\n      return sensorDriver.initialize(11, model.temperature.gpio); //#A\n    },\n    read: function () {\n      var readout = sensorDriver.read(); //#B\n      model.temperature.value = parseFloat(readout.temperature.toFixed(2));\n      model.humidity.value = parseFloat(readout.humidity.toFixed(2)); //#C\n      showValue();\n\n      setTimeout(function () {\n        sensor.read(); //#D\n      }, localParams.frequency);\n    }\n  };\n  if (sensor.initialize()) {\n    console.info('Hardware %s sensor started!', pluginName);\n    sensor.read();\n  } else {\n    console.warn('Failed to initialize sensor!');\n  }\n};\n\nfunction simulate() {\n  interval = setInterval(function () {\n    model.temperature.value = utils.randomInt(0, 40);\n    model.humidity.value = utils.randomInt(0, 100);\n    showValue();\n  }, localParams.frequency);\n  console.info('Simulated %s sensor started!', pluginName);\n};\n\nfunction showValue() {\n  console.info('Temperature: %s C, humidity %s \\%',\n    model.temperature.value, model.humidity.value);\n};\n\n//#A Initialize the driver for DHT22 on GPIO 12 (as specified in the model)\n//#B Fetch the values from the sensors\n//#C Update the model with the new temperature and humidity values; note that all observers will be notified\n//#D Because the driver doesnâ€™t provide interrupts, you poll the sensors for new values on a regular basis with a regular timeout function and set sensor.read() as a callback\n"],"file":"DHT22SensorPlugin.dev.js"}