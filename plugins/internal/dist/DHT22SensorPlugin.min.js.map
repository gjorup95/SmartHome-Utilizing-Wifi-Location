{"version":3,"sources":["DHT22SensorPlugin.js"],"names":["utils","require","resources","model","pi","sensors","interval","sensor","frequency","connectHardware","initialize","console","info","pluginName","temperature","gpio","read","sensorDriver","parseFloat","readout","toFixed","humidity","value","setTimeout","localParams","simulate","setInterval","randomInt","warn","showValue","exports","params","unexport","stop"],"mappings":"aAAA,IACEA,SAAQC,OADNC,UAAYD,QAAQ,2BACtBD,MAAQC,QAAQ,0BAGdE,MAAQD,UAAUE,GAAGC,QADrBC,WAAUC,yBACVJ,YAAQD,CAAAA,UAAaG,EAAzBG,UAAA,KAgBG,SAAMC,kBACLF,IAAAA,EAAAN,QAAA,mBACDM,EAAA,CAOCG,WAAY,WANdC,OAAQC,EAAKF,WAAsBG,GAAAA,MAAnCC,YAAAC,OASEC,KAAM,WANV,IAASP,EAAAA,EAAkBO,OACtBC,MAAAA,YAAehB,MAAQiB,WAAAC,EAA3BL,YAAAM,QAAA,IAQKjB,MAAMkB,SAASC,MAAQJ,WAAWC,EAAQE,SAASD,QAAQ,IAP3Db,YAEAgB,WAAON,WAFEV,EAAAS,QAIPQ,YAAEhB,aAEJL,EAAMW,cACNX,QAAMkB,KAAAA,8BAAoCA,YAU5Cd,EAAOS,QAPLO,QAAAA,KAAW,gCAVF,SAAbE,WAwBAnB,SAAWoB,YAAY,WATvBvB,MAAII,YAAOG,MAAcV,MAAA2B,UAAA,EAAA,IACvBhB,MAAAA,SAAaW,MAAAtB,MAAA2B,UAAA,EAAb,KACApB,aAFFiB,YAGOhB,WACLG,QAAAA,KAAQiB,+BAARf,YAaJ,SAASgB,YAXRlB,QAAAC,KAAA,mCAaGT,MAAMW,YAAYQ,MAAOnB,MAAMkB,SAASC,OAxD5CQ,QAAIN,MAAW,SAAGO,IAACP,YAAYO,GAAON,SAAtCA,WAEAK,mBAGIL,QAAAA,KAAQ,WADVM,OAEON,SACLhB,cAAAA,UALJF,OAAAyB,WASAF,QAAQG,KAAO,qBAAYpB","file":"DHT22SensorPlugin.min.js","sourcesContent":["var resources = require('./../../resources/model'),\n  utils = require('./../../utils/utils.js');\n\nvar interval, sensor;\nvar model = resources.pi.sensors;\nvar pluginName = 'Temperature & Humidity';\nvar localParams = {'simulate': false, 'frequency': 5000};\n\nexports.start = function (params) {\n  localParams = params;\n  if (params.simulate) {\n    simulate();\n  } else {\n    connectHardware();\n  }\n};\n\nexports.stop = function () {\n  if (params.simulate) {\n    clearInterval(interval);\n  } else {\n    sensor.unexport();\n  }\n  console.info('%s plugin stopped!', pluginName);\n};\n\nfunction connectHardware() {\n var sensorDriver = require('node-dht-sensor');\n  var sensor = {\n    initialize: function () {\n      return sensorDriver.initialize(11, model.temperature.gpio); //#A\n    },\n    read: function () {\n      var readout = sensorDriver.read(); //#B\n      model.temperature.value = parseFloat(readout.temperature.toFixed(2));\n      model.humidity.value = parseFloat(readout.humidity.toFixed(2)); //#C\n      showValue();\n\n      setTimeout(function () {\n        sensor.read(); //#D\n      }, localParams.frequency);\n    }\n  };\n  if (sensor.initialize()) {\n    console.info('Hardware %s sensor started!', pluginName);\n    sensor.read();\n  } else {\n    console.warn('Failed to initialize sensor!');\n  }\n};\n\nfunction simulate() {\n  interval = setInterval(function () {\n    model.temperature.value = utils.randomInt(0, 40);\n    model.humidity.value = utils.randomInt(0, 100);\n    showValue();\n  }, localParams.frequency);\n  console.info('Simulated %s sensor started!', pluginName);\n};\n\nfunction showValue() {\n  console.info('Temperature: %s C, humidity %s \\%',\n    model.temperature.value, model.humidity.value);\n};\n\n//#A Initialize the driver for DHT22 on GPIO 12 (as specified in the model)\n//#B Fetch the values from the sensors\n//#C Update the model with the new temperature and humidity values; note that all observers will be notified\n//#D Because the driver doesnâ€™t provide interrupts, you poll the sensors for new values on a regular basis with a regular timeout function and set sensor.read() as a callback\n"]}