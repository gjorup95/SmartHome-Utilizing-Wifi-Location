{"version":3,"sources":["ledsPlugin.js"],"names":["resources","require","actuator","interval","model","pi","actuators","leds","modelarray","pluginName","name","localParams","stopBlinking","led1state","alreadyPlayed","exports","start","params","simulate","connectHardware","setInterval","check1","stop","clearInterval","unexport","console","info","what","i","value","writeSync","blinkLED","Gpio","gpio","blinkLed","_","read","err","write","setTimeout","frequency"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIC,QAAJ,EAAcC,QAAd;AACA,IAAIC,KAAK,GAAGJ,SAAS,CAACK,EAAV,CAAaC,SAAb,CAAuBC,IAAvB,CAA4B,GAA5B,CAAZ;AACAC,UAAU,GAAGR,SAAS,CAACK,EAAV,CAAaC,SAAb,CAAuBC,IAApC;AACA,IAAIE,UAAU,GAAGL,KAAK,CAACM,IAAvB;AACA,IAAIC,WAAW,GAAG;AAAC,cAAY,KAAb;AAAoB,eAAa;AAAjC,CAAlB;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA,IAAIC,SAAS,GAAG,CAAhB;AACAC,aAAa,GAAG,KAAhB;;AAGAC,OAAO,CAACC,KAAR,GAAgB,UAAUC,MAAV,EAAkB;AAChCN,EAAAA,WAAW,GAAGM,MAAd;;AAEA,MAAIN,WAAW,CAACO,QAAhB,EAA0B;AACxBA,IAAAA,QAAQ;AACT,GAFD,MAEO;AACLC,IAAAA,eAAe;AACfC,IAAAA,WAAW,CAACC,MAAD,EAAS,GAAT,EAAab,UAAb,CAAX;AAED;AACF,CAVD;;AAYAO,OAAO,CAACO,IAAR,GAAe,YAAY;AACzB,MAAIX,WAAW,CAACO,QAAhB,EAA0B;AACxBK,IAAAA,aAAa,CAACpB,QAAD,CAAb;AACD,GAFD,MAEO;AACLD,IAAAA,QAAQ,CAACsB,QAAT;AACD;;AACDC,EAAAA,OAAO,CAACC,IAAR,CAAa,oBAAb,EAAmCjB,UAAnC;AACD,CAPD;;AASA,SAASY,MAAT,CAAgBM,IAAhB,EAAsB;AACpB,OAAKC,CAAC,GAAC,CAAP,EAAUA,CAAC,GAAC,CAAZ,EAAeA,CAAC,EAAhB,EAAmB;AACjB,QAAID,IAAI,CAACC,CAAD,CAAJ,CAAQC,KAAR,KAAkB,CAAtB,EAAwB;AACtBjB,MAAAA,YAAY,GAAG,IAAf;AACAV,MAAAA,QAAQ,CAAC4B,SAAT,CAAmB,CAAnB;AACAhB,MAAAA,aAAa,GAAE,KAAf;AACD;;AACA,QAAIa,IAAI,CAACC,CAAD,CAAJ,CAAQC,KAAR,KAAiB,CAArB,EAAuB;AACtBjB,MAAAA,YAAY,GAAG,IAAf;AACAV,MAAAA,QAAQ,CAAC4B,SAAT,CAAmB,CAAnB;AACAhB,MAAAA,aAAa,GAAG,KAAhB;AACD;;AACD,QAAIa,IAAI,CAACC,CAAD,CAAJ,CAAQC,KAAR,KAAkB,CAAlB,GAAsBf,aAAa,KAAK,KAA5C,EAAkD;AAChDF,MAAAA,YAAY,GAAG,KAAf;AACAmB,MAAAA,QAAQ;AACRjB,MAAAA,aAAa,GAAG,IAAhB;AACI;AACD;AACR;;AAED,SAASK,eAAT,GAA2B;AACzB,MAAIa,IAAI,GAAG/B,OAAO,CAAC,OAAD,CAAP,CAAiB+B,IAA5B;;AACC9B,EAAAA,QAAQ,GAAG,IAAI8B,IAAJ,CAAS5B,KAAK,CAAC6B,IAAf,EAAqB,KAArB,CAAX,CAFwB,CAEgB;;AACzCR,EAAAA,OAAO,CAACC,IAAR,CAAa,+BAAb,EAA8CjB,UAA9C;AACD;;AAED,SAASsB,QAAT,GAAmB;AACjB,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpB,QAAIvB,YAAJ,EAAkB;AAChB,aADgB,CAEhB;AACD;;AACDV,IAAAA,QAAQ,CAACkC,IAAT,CAAc,UAACC,GAAD,EAAMR,KAAN,EAAgB;AAAChB,MAAAA,SAAS,GAAGgB,KAAK,GAAE,CAAnB,CAAD,CAAsB;;AAClD,UAAIQ,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD;;AAEDnC,MAAAA,QAAQ,CAACoC,KAAT,CAAeT,KAAK,GAAG,CAAvB,EAA0B,UAAAQ,GAAG,EAAI;AAChC;AACC,YAAIA,GAAJ,EAAS;AACP,gBAAMA,GAAN;AACD;AACF,OALD;AAMD,KAXD;AAaAE,IAAAA,UAAU,CAACL,QAAD,EAAW,IAAX,CAAV;AACD,GAnBD;;AAqBAA,EAAAA,QAAQ;AACT;;AAED,SAAShB,QAAT,GAAoB;AAClBf,EAAAA,QAAQ,GAAGiB,WAAW,CAAC,YAAY;AACjC;AACA,QAAIhB,KAAK,CAACyB,KAAV,EAAiB;AACfzB,MAAAA,KAAK,CAACyB,KAAN,GAAc,KAAd;AACD,KAFD,MAEO;AACLzB,MAAAA,KAAK,CAACyB,KAAN,GAAc,IAAd;AACD;AACF,GAPqB,EAOnBlB,WAAW,CAAC6B,SAPO,CAAtB;AAQAf,EAAAA,OAAO,CAACC,IAAR,CAAa,gCAAb,EAA+CjB,UAA/C;AACD;;AAAA,C,CAED;AACA;AACA;AACA","sourcesContent":["var resources = require('./../../resources/model');\nvar actuator, interval;\nvar model = resources.pi.actuators.leds['1'];\nmodelarray = resources.pi.actuators.leds;\nvar pluginName = model.name;\nvar localParams = {'simulate': false, 'frequency': 2000};\nlet stopBlinking = false;\nvar led1state = 1;\nalreadyPlayed = false;\n\n\nexports.start = function (params) {\n  localParams = params;\n  \n  if (localParams.simulate) {\n    simulate();\n  } else {\n    connectHardware();\n    setInterval(check1, 500,modelarray);\n    \n  }\n};\n\nexports.stop = function () {\n  if (localParams.simulate) {\n    clearInterval(interval);\n  } else {\n    actuator.unexport();\n  }\n  console.info('%s plugin stopped!', pluginName);\n};\n\nfunction check1(what) {\n  for (i=1; i<4; i++){\n    if (what[i].value === 0){\n      stopBlinking = true;\n      actuator.writeSync(1);\n      alreadyPlayed= false;\n    }\n     if (what[i].value=== 1){\n      stopBlinking = true;\n      actuator.writeSync(0);\n      alreadyPlayed = false;\n    }\n    if (what[i].value === 2 & alreadyPlayed === false){\n      stopBlinking = false;\n      blinkLED();\n      alreadyPlayed = true;\n         }\n        }\n}\n\nfunction connectHardware() {\n  var Gpio = require('onoff').Gpio;\n   actuator = new Gpio(model.gpio, 'out'); //#D changed gpio from model.gpio\n  console.info('Hardware %s actuator started!', pluginName);  \n}\n\nfunction blinkLED(){\n  const blinkLed = _ => {\n    if (stopBlinking) {\n      return;\n      //return actuator.unexport();\n    }\n    actuator.read((err, value) => {led1state = value ^1;// Asynchronous read\n      if (err) {\n        throw err;\n      }\n  \n      actuator.write(value ^ 1, err => {\n       // Asynchronous write\n        if (err) {\n          throw err;\n        }\n      });\n    });\n  \n    setTimeout(blinkLed, 2000);\n  };\n  \n  blinkLed();\n}\n  \nfunction simulate() {\n  interval = setInterval(function () {\n    // Switch value on a regular basis\n    if (model.value) {\n      model.value = false;\n    } else {\n      model.value = true;\n    }\n  }, localParams.frequency);\n  console.info('Simulated %s actuator started!', pluginName);\n};\n\n//#A Observe the model for the LEDs\n//#B Listen for model changes, on changes call switchOnOff\n//#C Change the LED state by changing the GPIO state\n//#D Connect the GPIO in write (output) mode\n\n"],"file":"ledsPlugin.dev.js"}