{"version":3,"sources":["websockets.js"],"names":["WebSocketServer","require","Server","resources","selectResouce","url","parts","split","console","result","i","length","exports","server","wss","listen","ws","info","changes","send","JSON","stringify","object","e","log"],"mappings":"aAAA,IAAIA,gBAAkBC,QAAQ,MAAMC,OAClCC,UAAYF,QAAQ,wBAajB,SACDG,cAAUC,GAAE,IAAAC,EAAAD,EAAAE,MAAA,KACVC,EAAAA,QASJ,IARG,IAAAC,EAAAN,UAQMO,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAR/BD,EAAAA,EAAAH,EAAAI,IAdL,OAAAD,EAHAG,QACET,OAAYF,SAAQY,GAGpB,IAAIC,EAAM,IAAId,gBAAgB,CAACa,OAAQA,IADzCD,QAAQG,KAAR,+BACED,EAAIA,GAAG,aAAOd,SAAgBgB,GAACH,IAAAA,EAAQA,EAAAA,WAAAA,IAAvCL,QAAiDS,KAAAZ,GAK/C,IAJFG,OAAQS,QAAKb,cAAAC,GAAA,SAAba,GACAF,EAAOG,KAAAC,KAAPC,UAAqBH,EAAc,GAAAI,QAAA,gBASjC,MAAOC,GANPf,QAAIgB,IAAA,iCAAAnB","file":"websockets.min.js","sourcesContent":["var WebSocketServer = require('ws').Server,\n  resources = require('./../resources/model');\n\nexports.listen = function(server) {\n  var wss = new WebSocketServer({server: server}); //#A\n  console.info('WebSocket server started...');\n  wss.on('connection', function (ws) { //#B\n    var url = ws.upgradeReq.url;\n    console.info(url);\n    try {\n      Object.observe(selectResouce(url), function (changes) { //#C\n        ws.send(JSON.stringify(changes[0].object), function () {\n        });\n      })\n    }\n    catch (e) { //#D\n      console.log('Unable to observe %s resource!', url);\n    };\n  });\n};\n\nfunction selectResouce(url) { //#E\n  var parts = url.split('/');\n  parts.shift();\n  var result = resources;\n  for (var i = 0; i < parts.length; i++) {\n    result = result[parts[i]];\n  }\n  return result;\n}\n\n//#A Create a WebSockets server by passing it the Express server\n//#B Triggered after a protocol upgrade when the client connected\n//#C Register an observer corresponding to the resource in the protocol upgrade URL\n//#D Use a try/catch to catch to intercept errors (e.g., malformed/unsupported URLs)\n//#E This function takes a request URL and returns the corresponding resource\n\n"]}